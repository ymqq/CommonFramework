package cn.ffcs.ms.crm_mobile_v20.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import cn.ffcs.ms.crm_mobile_v20.entities.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Type = new Property(1, String.class, "type", false, "TYPE");
        public final static Property Time = new Property(2, java.util.Date.class, "time", false, "TIME");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
        public final static Property Desc = new Property(4, String.class, "desc", false, "DESC");
        public final static Property Earning = new Property(5, int.class, "earning", false, "EARNING");
        public final static Property Meid = new Property(6, String.class, "meid", false, "MEID");
        public final static Property Scene = new Property(7, String.class, "scene", false, "SCENE");
        public final static Property Phone = new Property(8, String.class, "phone", false, "PHONE");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TYPE\" TEXT," + // 1: type
                "\"TIME\" INTEGER," + // 2: time
                "\"STATUS\" INTEGER NOT NULL ," + // 3: status
                "\"DESC\" TEXT," + // 4: desc
                "\"EARNING\" INTEGER NOT NULL ," + // 5: earning
                "\"MEID\" TEXT," + // 6: meid
                "\"SCENE\" TEXT," + // 7: scene
                "\"PHONE\" TEXT);"); // 8: phone
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
        stmt.bindLong(4, entity.getStatus());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
        stmt.bindLong(6, entity.getEarning());
 
        String meid = entity.getMeid();
        if (meid != null) {
            stmt.bindString(7, meid);
        }
 
        String scene = entity.getScene();
        if (scene != null) {
            stmt.bindString(8, scene);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(2, type);
        }
 
        java.util.Date time = entity.getTime();
        if (time != null) {
            stmt.bindLong(3, time.getTime());
        }
        stmt.bindLong(4, entity.getStatus());
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(5, desc);
        }
        stmt.bindLong(6, entity.getEarning());
 
        String meid = entity.getMeid();
        if (meid != null) {
            stmt.bindString(7, meid);
        }
 
        String scene = entity.getScene();
        if (scene != null) {
            stmt.bindString(8, scene);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(9, phone);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // type
            cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)), // time
            cursor.getInt(offset + 3), // status
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // desc
            cursor.getInt(offset + 5), // earning
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // meid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // scene
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // phone
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTime(cursor.isNull(offset + 2) ? null : new java.util.Date(cursor.getLong(offset + 2)));
        entity.setStatus(cursor.getInt(offset + 3));
        entity.setDesc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEarning(cursor.getInt(offset + 5));
        entity.setMeid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setScene(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPhone(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
